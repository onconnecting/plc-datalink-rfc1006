#Global Agent Configuration
[agent]
  interval = "100ms"
  round_interval = true
  Hostname="wsl"
  flush_interval = "1s"
  quiet= false
  debug=false


# Plugin for Siemens PLCs via the S7 protocol (RFC1006)
[[inputs.s7comm]]
  # PLC address, with port default 102 if not explicitly specified.
  # <host>[:port]
  server = "192.168.4.100"
  rack = 0
  slot = 1

  # Set a timeout and number of retry attempts 
  timeout = "10s"    

  # Max count of fields to be bundled in one batch-request.
  pdu_size = 10

  # Log detailed connection messages for debugging, only when Telegraf runs in debug mode
  debug_connection = false

  # Metric address definition
  # "<area>.<type><address>[.extra]"
  # area    - e.g. be "DB1" for data-block one
  # type    - supported types are (uppercase)
  # X  -- bit, requires the bit-number as 'extra' parameter, name="Bool_Value", address="DB2000.X0.0"
  # B  -- byte (8 bit), name="Byte_value", address="DB2000.B1"
  # C  -- character (8 bit)
  # W  -- word (16 bit)
  # DW -- double word (32 bit)
  # I  -- integer (16 bit)
  # DI -- double integer (32 bit)
  # R  -- IEEE 754 real floating point number (32 bit)
  # DT -- date-time, always converted to unix timestamp with nano-second precision
  # S  -- string, requires the maximum length of the string as 'extra' parameter, name="String_Value", address="DB2000.S30.13"
  [[inputs.s7comm.metric]]
    fields = [{ name="Bool_Value", address="DB2000.X0.0" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Bool_Value"

  [[inputs.s7comm.metric]]
    fields = [{ name="Byte_value", address="DB2000.B1" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Byte_value"

  [[inputs.s7comm.metric]]
    fields = [{ name="Char_Value", address="DB2000.C2" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Char_Value"

  [[inputs.s7comm.metric]]
    fields = [{ name="Word_Value", address="DB2000.W4" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Word_Value"

  [[inputs.s7comm.metric]]
    fields = [{ name="Int_Value", address="DB2000.I6" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Int_Value"

  [[inputs.s7comm.metric]]
    fields = [{ name="Dword_Value", address="DB2000.DW8" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Dword_Value"

  [[inputs.s7comm.metric]]
    fields = [{ name="Dint_Value", address="DB2000.DI12" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Dint_Value"

  [[inputs.s7comm.metric]]
    fields = [{ name="Real_Value", address="DB2000.R16" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_Real_Value"   

  [[inputs.s7comm.metric]]
    fields = [{ name="String_Value", address="DB2000.S30.13" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_String_Value" 

  [[inputs.s7comm.metric]]
    fields = [{ name="DemoBoard.lightBarrier", address="DB9.X1732.1" }]
    [inputs.s7comm.metric.tags]
      machine = "devBoard_DemoBoard.lightBarrier" 
  

# Filter metrics with repeating field values
[[processors.dedup]]
  dedup_interval = "600s"


# MQTT Output Plugin
[[outputs.mqtt]]
  servers = ["tcp://192.168.4.172:1883"]
  topic = "isk/onconnecting/ot-connector/devBoard"
  data_format = "json"
  layout = "non-batch"
  json_timestamp_units = "1ms"
  
